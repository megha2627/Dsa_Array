Question:There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109


class Solution {
    private int[][] dp;

    public int uniquePaths(int m, int n) {
        // Initialize DP table with -1
        dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        // Start solving from the top-left corner
        return solve(m, n, 0, 0);
    }

    private int solve(int m, int n, int i, int j) {
        // If out of bounds, return 0 (no valid path)
        if (i >= m || j >= n) {
            return 0;
        }

        // Base case: If we reach the bottom-right corner, return 1
        if (i == m - 1 && j == n - 1) {
            return 1;
        }

        // If already calculated, reuse the result
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        // Recursively calculate the number of unique paths
        int right = solve(m, n, i, j + 1);  // Move right
        int down = solve(m, n, i + 1, j);  // Move down

        // Store the result in the DP table
        dp[i][j] = right + down;

        return dp[i][j];
    }
}
